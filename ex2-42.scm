(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append `() (map proc seq)))

(define (enumerate-interval low high)
  (if (> low high)
      `()
      (cons low (enumerate-interval (1+ low) high))))

(define (filter predicate sequence)
  (cond ((null? sequence) `())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                    (adjoin-position new-row k rest-of-queens))
                  (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (define (adjoin-position new-row k rest-of-queens)
    (cons (list k new-row) rest-of-queens))
  (define empty-board `())
  (define (safe? k positions)
    (define (has-k-col? pos) (= k (car pos)))
    (define (and? a b) (and a b))
    (let ((k-queen (car (filter has-k-col? positions)))
          (rest-queens (filter (lambda (p)
                                 (not (has-k-col? p))) positions)))
      (accumulate and? #t (map (lambda (pos)
                                (not (checkmate? k-queen pos)))
                              rest-queens))))
  (define (checkmate? pos1 pos2)
    (or (= (car pos1) (car pos2))
        (= (cadr pos1) (cadr pos2))
        (= (abs (- (car pos1) (car pos2)))
           (abs (- (cadr pos1) (cadr pos2))))))
  (queen-cols board-size))
