(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (make-product (exponent exp)
                       (make-exponentiation (base exp)
                                             (1- (exponent exp)))
                       (deriv (base exp) var)))
        (else
         (error "unknown expression type -- DERIV" exp))))

(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (filter predicate sequence)
  (cond ((null? sequence) '())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (make-sum . args)
  (let ((s (accumulate + 0 (filter number? args)))
        (vars (filter (lambda (a) (not (number? a))) args)))
    (cond ((= 0 (length vars)) s)
          ((and (= 1 (length vars)) (= s 0)) (car vars))
          (else (append (list '+)
                        (if (= s 0)
                            vars
                            (cons s vars)))))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  (if (> 3 (length s))
      (append (list (car s)) (cddr s))
      (caddr s)))

(define (make-product . args)
  (let ((p (accumulate * 1 (filter number? args)))
        (vars (filter (lambda (a) (not (number? a))) args)))
    (cond ((or (= 0 p) (= 0 (length vars))) p)
          ((and (= 1 (length vars)) (= p 1)) (car vars))
          (else (append (list '*)
                        (if (= p 1)
                            vars
                            (cons p vars)))))))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (if (> (length p) 3)
      (append (list (car p)) (cddr p))
      (caddr p)))

(define (make-exponentiation b e)
  (cond ((=number? e 1) b)
        ((=number? e 0) 1)
        ((and (number? b) (number? e)) (expt b e))
        (else (list '** b e))))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))


; tests
(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(** x 2) 'x)
(deriv '(+ (* 3 (** x 2)) x) 'x)
(deriv '(* x y (+ x 3)) 'x)